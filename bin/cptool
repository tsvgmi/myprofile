#!/bin/bash
. ${0%/*}/../etc/tool.env
#######################################################################
# File: 	admtool
# Description:  Sysadmin tools
# Created:	2002-06-23
# $Id$
#######################################################################
PATH=$PATH:/sbin:/usr/sbin

function f_shutdown_vms {
#==========================================================================
# Function:    [f_shutdown_vms]
# Description: .
#==========================================================================
  typeset vm

  for vm in $*; do
    VBoxManage controlvm $vm savestate
  done
}

function f_killApp {
#======================================================================
# Function:    [f_killApp]
# Description: .
#======================================================================
  typeset app pidlist

  pidlist=
  for app in $*; do
    set -- $(ps -awx | egrep "(Applications|Resources|Library|PreferencePanes)/.*${app}" | egrep -v egrep | sed -e 's/^ *//' -e 's/ .*$//')
    if [ $# -gt 0 ]; then
      pidlist="$pidlist $*"
    fi
  done
  if [ "$pidlist" ]; then
    set -x
    kill -1 $pidlist
    set +x
    sleep 1
  fi
}

function f_umount {
#==========================================================================
# Function:    [f_umount]
# Description: .
#==========================================================================
  for vol in $*; do
    if mount | egrep $vol; then
      set -x
      sudo umount -f $vol &
      set +x
    fi
  done
}

#==========================================================================
# Function:    [f_delete10Net]
# Description: .
#==========================================================================
function f_delete10Net {
  typeset gwif

  set -- $(netstat -nrf inet | egrep "^10 ")
  if [ $# -gt 2 ]; then
    gwif=$2
    F_surun route delete -net 10.0.0.0 $gwif 255.0.0.0
  fi
}

function wait_for_subnets {
  typeset found subnet subnets
  
  subnets=$@
  F_logProgress "Waiting for subnets $subnets"
  while true; do
    found=yes
    for subnet in $subnets; do
      ifconfig | fgrep $subnet
      [ $? -eq 0 ] || found=
    done
    [ "$found" ]  && break
    sleep 3
  done
  if [ "$found" ]; then
    return 0
  else
    return 1
  fi
}

#==========================================================================
# Function:    [f_isWorkingHour]
# Description: .
#==========================================================================
function f_isWorkingHour {
  typeset dow=$(date +%u)
  if [ "$dow" -ge 1 -a "$dow" -le 5 ]; then
    typeset hour=$(date +%H)
    if [ "$hour" -ge 5 -a "$hour" -le 18 ]; then
      return 0
    fi
  fi
  return 1
}

function f_mount_fs {
#==========================================================================
# Function:    [f_mount_fs]
# Description: .
#==========================================================================
  typeset src=$1
  typeset target=$2
  typeset fstype=$3
  typeset subnet=${src##*@}
  subnet=${subnet%.*}

  [ "$target" ] || target=/mnt/${src##*/}
  [ "$fstype" ] || fstype=nfs
  if df $target | egrep $src; then
    F_logProgress "$target already mounted"
    return
  fi
  F_logProgress "Mounting $target as $fstype"
  if ifconfig | fgrep $subnet ; then
    case $fstype in
      nfs)
        [ -d $target ] || mkdir -p $target
        set -x
        sudo mount -t nfs -o resvport,rw $src $target
        set +x
        ;;
      smb)
        tmpf=/tmp/smbfs.as
        set -x
        cat >$tmpf <<EOF
tell application "Finder"
  open location "smb://$src"
end tell
EOF
cat $tmpf
        osascript $tmpf
        rm -f $tmpf
        set +x
        ;;
      *)
        F_logProgress "Unknown file type: $fstype"
        ;;
    esac
  fi
  set +x
}

function f_location_control {
#==========================================================================
# Function:    [f_location_control]
# Description: .
#==========================================================================
  typeset location=$1
  typeset state=$2

  F_logProgress "Turn wifi to $state and switch network to $location"
  set -x
  sudo networksetup -switchtolocation $location
  sleep 1
  sudo networksetup -setairportpower  en0 $state
  set +x
  sleep 3
}

function f_startJabber {
#==========================================================================
# Function:    [f_startJabber]
# Description: .
#==========================================================================
  pkill Jabber
  if f_isWorkingHour; then
    (
      delay=60
      sleep $delay
      F_logProgress "Starting Jabber after $delay secs" >&2
      pkill -f Jabber
      open -g -a "Cisco Jabber"
    ) &
  fi
}

#------------------------------------------------ Begin of script ---
#------------------------------------------------ Begin of script ---
#------------------------------------------------ Begin of script ---

F_subCommand $*
oper=$1; shift
case $oper in
  splitvpn)
    [ $# -ge 2 ] || F_usageOper $oper
    dest=$1 vpnif=$2
    [ "$dest" ] || dest=etrade
    [ "$vpnif" ] || vpnif=utun0
    F_rbrun vpnhelper $dest split $vpnif
    ;;

  cvpn-reset)
    sudo kextunload /System/Library/Extensions/CiscoVPN.kext
    sleep 1
    sudo kextload /System/Library/Extensions/CiscoVPN.kext
    ;;

  mount-nfs)
    [ $# -ge 1 ] || F_usageOper $oper
    src=$1
    target=$2
    [ "$target" ] || target=/mnt/${src##*/}
    f_umount $target
    f_mount_fs $src $target nfs
    ;;

  mount-smb)
    [ $# -ge 1 ] || F_usageOper $oper
    src=$1
    target=$2
    [ "$target" ] || target=/mnt/${src##*/}
    f_umount $target
    set -x
    f_mount_fs $src $target smb
    ;;

  connect)
    for target in $*; do
      if [ $target == s ]; then
        F_logProgress "Waiting current location to stabilize"
        sleep 10
      else
        $0 _connect $target
      fi
    done
    ;;

  mount-smbs)
    addr=1
    vols="Torrents:T1 Music Movies TV Voice"
    while getopts :a:v:-: i; do
      if [ "$i" = "-" ]; then
        i="${OPTARG%%=*}" OPTARG="${OPTARG#$i}" OPTARG="${OPTARG#=}" i=-$i
      fi
      case $i in
      a|-addr) addr=$OPTARG ;;
      v|-vols) vols=$OPTARG ;;
      *)       F_usageOper $oper ;;
      esac
    done
    let i=$OPTIND-1; shift $i; OPTIND=0
    for vol in $vols; do
      svol=${vol%:*}
      tvol=${vol#*:}
      f_mount_fs home@192.168.29.$addr/$svol /Volumes/$tvol smb
    done
    exit 0
    ;;

  _setup_app_by_location)
    [ $# -ge 1 ] || F_usageOper $oper
    target=$1
    case $target in
    vpn|et|etwl|etrade|home-vpn|auto)
      f_killApp iTunes Plex.Media.Server Viber Google.Drive VOX MusicManager 
      f_killApp Outlook Evernote
      f_shutdown_vms Windows.10-64 Ubuntu-132
      f_startJabber
      F_surun $EM_MYPROG _killasroot X.TrendMicro
      f_delete10Net
      osascript -e "set Volume 0"
      f_umount /mnt/usb0 /Volumes/{Torrents,Music,Movies,TV}
      open https://channele.corp.etradegrp.com
      #open -a "Microsoft Outlook"
      ;;
    home)
      f_killApp Jabber
      F_surun $EM_MYPROG _killasroot
      f_delete10Net
      $0 mount-smbs
      open -g -a "Plex Media Server"
      ;;
    svpn)
      f_killApp iTunes Plex.Media.Server Viber Google.Drive VOX MusicManager Outlook
      f_startJabber
      # Outlook / 365 does not work with svpn
      f_delete10Net
      osascript -e "set Volume 0"
      f_umount /mnt/usb0 /Volumes/{Torrents,Music,Movies,TV}
      $0 mount-smbs Voice
      open https://channele.corp.etradegrp.com
      ;;
    *)
      F_abort "Unknown app to stop/start target: $target"
      ;;
    esac
    rm -f ~/.ssh/master*
    ;;

  #Use: connect et|home|vpn|splitvpn
  #Des: Setup environment for different network location.
  _connect)
    unset GEM_HOME GEM_PATH
    cd
    target=$1
    case $target in
    vpn|et|etwl|etrade)
      f_location_control Automatic on
      sudo ifconfig en0 up            # Wired
      sudo ifconfig en3 up            # Wired
      wait_for_subnets 10.
      $0 _setup_app_by_location $target
      ;;
    # No connection to work
    home)
      f_location_control Automatic on
      sudo ifconfig en3 up            # Wired
      sudo ifconfig en0 down          # Wireless
      sleep 3
      wait_for_subnets 192.168.29
      $0 _setup_app_by_location $target
      ;;
    # VPN from home (no split)
    home-vpn)
      f_location_control HomeVPN on
      sudo ifconfig en3 down        # Wired
      sudo ifconfig en0 up          # Wireless
      sleep 3
      wait_for_subnets 10.
      $0 _setup_app_by_location $target
      ;;
    auto)
      f_location_control Automatic on
      $0 _setup_app_by_location $target
      ;;

    svpn)
      sayword="split-v-p-n"
      f_location_control svpn on
      sudo ifconfig en3 up
      sudo ifconfig en0 up
      sleep 3
      connected=
      F_logProgress "Waiting for 10.x ip address to show up"
      while [ ! "$connected" ]; do
        for intf in en0 en1 en2 en3; do
          if ifconfig $intf | egrep "inet.*10\.50\."; then
            F_logProgress "Detect VPN interface at $intf"
            rm -f ~/.ssh/master*
            F_system $EM_MYPROG splitvpn etrade $intf
            connected=true
            break
          fi
        done
        sleep 1
      done
      $0 _setup_app_by_location $target

      # Another try
      F_system $EM_MYPROG splitvpn etrade $intf
      ;;

    *)
      F_abort "Unknown connection node: $target"
      ;;
    esac
    [ "$sayword" ] || sayword=$target
    say $sayword
    rm -f ~/.ssh/master*
    echo $target >~/.ssh/last_loc.dat
    ;;

  #------------------ Kill off all non-essential app to preserve battery ---
  lowpower)
    f_killApp MicrosoftKeyboardHelper Microsoft.Database.Daemon \
    ;;

  _killasroot)
    f_killApp $@
    ;;

  *)
    F_usageOper $oper
    ;;
esac
exit 0

