#######################################################################
# File: 	tool.env
# Description:  Mocana tool environment (site independent)
#       All shell script must source this as the 1st command.  Also,
#       it is prefereable that the source command itself uses absolute
#       path to avoid environment/path issue - which this is designed
#       to prevent in the first place.
# Created:	2002-07-30
# $Id$
#######################################################################
# Make sure tool environment is sourced once only (in case nesting
# script)
export EM_HOME_DIR=~/myprofile
export RUBYLIB=$RUBYLIB:$EM_HOME_DIR/bin
export RUBYOPT=rubygems

export EM_TOOL_DIR=~/emtools

[ "$EM_TOOL_BASE" ] || export EM_TOOL_BASE=/etrade/tools
[ "$ET_ROOT" ] || export ET_ROOT=/etrade

# Support ksh syntax
case $SHELL in
*/ksh)
  alias type=whence ;;
esac

if [ ! "$EM_TOOL_DEFINED" ]; then
  export EM_TOOL_DEFINED=yes

  #------------------------------------------- Personal setting loading ---
  if [ "$USER" != "root" ]; then
    if [ ! -d "$HOME/.tool" ]; then
      [ -w "$HOME" ] && mkdir "$HOME/.tool"
    fi
  fi
  export EM_PRIVDIR=$HOME/.tool

  # Save the starting path and shell.  It may be used if we started a
  # shell inside one of the tool
  export EM_PATH=$PATH
  export EM_OSHELL=${EM_OSHELL:-$SHELL}
  export EM_BASH_ENV=$BASH_ENV

  # If bash already set this for me.  Don't bother, but other shell
  # (esp. ksh) may not set it.
  if [ ! "$ET_ENVIRONMENT" ]; then
    export PATH=/bin:/usr/bin:/usr/openwin/bin:/usr/dt/bin:/usr/ucb:$ET_ROOT/bin
  fi
  if [ "$HOSTNAME" ]; then
    EM_HOST=$HOSTNAME
  else
    EM_HOST=$(uname -n)
  fi
  export EM_HOST=${EM_HOST%%.*}
  [ -f "$EM_PRIVDIR/toolrc" ] && . "$EM_PRIVDIR/toolrc"

  # Set the internal supported OS type
  _os=$(uname)
  _machine=$(uname -m)
  _kverion=$(uname -v)

  case $_os in
    Linux)
      case $_kverion in
      *Ubuntu*)
        EM_OSTYPE=linux-64
        export ET_OS=ubuntu
        ;;
      *)
        case $_machine in
        x86_64)
          EM_OSTYPE=linux-64
          [ "$ET_PROCESSOR" ] || export ET_PROCESSOR=intel
          ;;
        *)
          EM_OSTYPE=linux
          [ "$ET_PROCESSOR" ] || export ET_PROCESSOR=intel
          ;;
        esac
        [ "$ET_OS" ] || export ET_OS=linux
        [ "$ET_OPENSRC_ROOT" ] || export ET_OPENSRC_ROOT=/etrade/pkgs/linux/intel/opensrc/1.0
        PATH=$PATH:$ET_OPENSRC_ROOT/bin
        ;;
      esac
      ;;
    SunOS)
      EM_OSTYPE=solaris
      [ "$ET_OPENSRC_ROOT" ] || export ET_OPENSRC_ROOT=/etrade/pkgs/opensrc/1.0
      PATH=$PATH:$ET_OPENSRC_ROOT/bin
      ;;
    CYGWIN*)
      EM_OSTYPE=cygwin
      ;;
    Darwin*)
      EM_OSTYPE=osx
      ;;
  esac
  export EM_OSTYPE

  # EM_TOOL_DIR:  Dominant tool dir path (developer or user)
  # (i.e. if user check out the toolset for development, it will
  #  be set to this value)
  if [ ! "$EM_TOOL_DIR" ]; then
    case $0 in
    /*) export EM_TOOL_DIR=${0%/*}/.. ;;
    *)  export EM_TOOL_DIR=$PWD/${0%/*}/.. ;;
    esac
    if [ ! -f $EM_TOOL_DIR/etc/pem.env ]; then
      EM_TOOL_DIR=$EM_TOOL_BASE
      EM_TOOL_DIR=$EM_TOOL_BASE
    fi
  fi

  # EM_TOOL_DIRARCH: Binary tool dir path
  export EM_TOOL_DIRARCH=$EM_TOOL_BASE/$EM_OSTYPE

  export EM_TOOL_BIN=$EM_TOOL_DIR/bin
  export EM_TOOL_LIB=$EM_TOOL_DIR/lib
  export EM_ETC_DIR=$EM_TOOL_DIR/etc

  # In case TMPDIR is not set.  We set to some place with storage
  if [ ! "$TMPDIR" ]; then
    if [ -d /usr/tmp ]; then
      TMPDIR=/usr/tmp
    else
      TMPDIR=/tmp
    fi
  fi
  export EM_TMPDIR=$TMPDIR
  
  [ "$ET_INSTANCE_ROOT" ] || export ET_INSTANCE_ROOT=$HOME

  if [ -w $ET_INSTANCE_ROOT/logs ]; then
    export EM_DATA_DIR=$ET_INSTANCE_ROOT/logs/$USER
    [ -d $EM_DATA_DIR ] || mkdir -p $EM_DATA_DIR
    if [ ! -w $EM_DATA_DIR ]; then
      export EM_DATA_DIR=$HOME/var
    fi
  else
    export EM_DATA_DIR=$HOME/var
  fi
  export EM_LOG_DIR=$EM_DATA_DIR
  [ -d $EM_DATA_DIR ] || mkdir -p $EM_DATA_DIR
  export EM_TOOL_LIBARCH=$EM_TOOL_DIRARCH/lib

  EM_LOGSEVERITY=${EM_LOGSEVERITY:-1}

  #--------------------------------------------------------- Unix stuff ---
  export LD_LIBRARY_PATH=/usr/lib:$EM_TOOL_LIBARCH:/usr/dt/lib:/usr/openwin/lib:$LD_LIBRARY_PATH

  # Different OS set different var name for user
  [ "$LOGNAME" ] || export LOGNAME=$(whoami)
  if [ ! "$USER" ]; then
    # Can't do an -a, cygwin bash seems to have problem
    [ "$LOGNAME" ] && export USER=$LOGNAME
    [ "$USERNAME" ] && export USER=$USERNAME
  fi
  [ "$HOME" ] || export HOME=~

  for dir in /usr /usr/local $EM_TOOL_DIR /usr/X11R6; do
    [ -d $dir ] || continue
    [ -d $dir/bin       ] && PATH=$PATH:$dir/bin
    [ -d $dir/sbin      ] && PATH=$PATH:$dir/sbin
    [ -d $dir/lib       ] && LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$dir/lib
    [ -d $dir/man       ] && MANPATH=$MANPATH:$dir/man
    [ -d $dir/share/man ] && MANPATH=$MANPATH:$dir/share/man
  done

  PATH=$PATH:$EM_TOOL_LIB/pem

  # These paths takes precedence unless they are in EM
  for dir in /etrade/tools /opt/local $EM_TOOL_DIRARCH; do
    [ -d $dir ] || continue
    if [ "$ET_ENVIRONMENT" ]; then
      [ -d $dir/sbin      ] && PATH=$PATH:$dir/sbin
      [ -d $dir/bin       ] && PATH=$PATH:$dir/bin
      [ -d $dir/lib       ] && LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$dir/lib
      [ -d $dir/man       ] && MANPATH=$MANPATH:$dir/man
      [ -d $dir/share/man ] && MANPATH=$dir/share/man:$MANPATH
    else
      [ -d $dir/sbin      ] && PATH=$dir/sbin:$PATH
      [ -d $dir/bin       ] && PATH=$dir/bin:$PATH
      [ -d $dir/lib       ] && LD_LIBRARY_PATH=$dir/lib:$LD_LIBRARY_PATH
      [ -d $dir/man       ] && MANPATH=$dir/man:$MANPATH
      [ -d $dir/share/man ] && MANPATH=$MANPATH:$dir/share/man
    fi
  done
  PATH=/bin:$PATH
  LD_LIBRARY_PATH=/lib:$LD_LIBRARY_PATH

  export RUBYLIB=$RUBYLIB:$EM_TOOL_LIB:/etrade/tools/lib
  [ -d $EM_TOOL_BASE/lib/ruby/site_ruby/1.8 ] &&
    RUBYLIB=$RUBYLIB:$EM_TOOL_BASE/lib/ruby/site_ruby/1.8

  # Hack for a specific arch only
  [ -d $EM_TOOL_BASE/lib/ruby/site_ruby/1.8/i386-linux ] &&
    RUBYLIB=$RUBYLIB:$EM_TOOL_BASE/lib/ruby/site_ruby/1.8/i386-linux
  
  if type -p more >/dev/null; then
    export EM_MORE=more
  else
    export EM_MORE="less -EX"
  fi

  if ! type -p gvim >/dev/null; then
    if type -p mrxvt >/dev/null; then
      GVIM="mrxvt -aht -e vim"
    else
      GVIM="xterm -e vim"
    fi
  fi
  if [ "$DISPLAY" ]; then
    # EM_RDISPLAY is used if we need to ssh/rsh to a remote host and run
    # a X program.  In this case, DISPLAY must be network addressable.
    # We use EM_RDISPLAY instead of override DISPLAY so local X11 processing
    # would not have to go onto network
    case $DISPLAY in
    :[0-9]*) export EM_RDISPLAY=${EM_HOST}${DISPLAY} ;;
    *)       export EM_RDISPLAY=$DISPLAY ;;
    esac
    export GVIM=${GVIM:-gvim}
  elif [ "$EM_OSTYPE" = "osx" ]; then
    export GVIM=gvim
  else
    export GVIM="vim"
  fi
  export EDITOR=${EDITOR:-vim}
  export COLUMNS                        # For shell

  # Not sure if it is desirable.  Maybe should disable to prevent
  # working path pollution w/ unpredicted behaviour.  But it requires
  # full qualification for each OS, and complicate PATH setting here.
  # So we punt for now.
  PATH=$EM_TOOL_BIN:$PATH:$EM_PATH
  
  export RUBY=$(type -p ruby)
  # This is a hack now until ruby is installed on all systems
  if [ ! "$RUBY" ]; then
    for dir in /etrade/pkgs/linux/intel/ruby/*; do
      if [ -d $dir -a -x $dir/bin/ruby ]; then
        RUBY=$dir/bin/ruby
      fi
    done
  fi
  export PYTHON=$(type -p python)
  if [ "$PYTHONPATH" ]; then 
    export PYTHONPATH=$EM_TOOL_DIR/lib:$PYTHONPATH
  else
    export PYTHONPATH=$EM_TOOL_DIR/lib
  fi
  export PERL=$(type -p perl)

  # A better tracing prompt
  export PS4="+ \$ \t \W "

  #umask 002                     # File created is group writable
  . $EM_TOOL_LIB/kshfunc/function.auto

  for dir in $ET_INSTANCE_ROOT; do
    [ -d $dir/sbin ] && PATH=$PATH:$dir/sbin
    [ -d $dir/bin  ] && PATH=$PATH:$dir/bin
    [ -d $dir/lib  ] && LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$dir/lib
    [ -d $dir/lib  ] && RUBYLIB=$RUBYLIB:$dir/lib
    [ -d $dir/man  ] && MANPATH=$MANPATH:$dir/man
    [ -d $dir/lib/perl5 ] && PERL5LIB=$PERL5LIB:$dir/lib/perl5/site_perl/5.8.0/i386-linux-thread-multi
  done

  [ "$PEM_WDIR" ] || export PEM_WDIR=$EM_TOOL_DIR/pem
fi
export EM_EASI="$ET_ENVIRONMENT:$ET_APPLICATION:$ET_SERVER:$ET_INSTANCE"

# Figure my own program.  Can't rely on $0 b/c $0 does not contain the
# full path sometimes (i.e. executed in the current dir)
case $0 in
  /*) EM_MYPROG=$0 ;;
  *)  EM_MYPROG=$PWD/$0 ;;
esac

if [ "$EM_TRACKTMP" ]; then
#-------- Script does not have to worry about trap to remove temp files ---
  trap "/bin/rm -rf $TMPDIR/P*@$$.*; ls $TMPDIR/P*.tmp 2>/dev/null; exit 1" INT QUIT KILL TERM
  trap "/bin/rm -rf $TMPDIR/P*@$$.*; ls $TMPDIR/P*.tmp 2>/dev/null" EXIT HUP
else
  trap "/bin/rm -rf $TMPDIR/P*@$$.*; exit 1" INT QUIT KILL TERM
  trap "/bin/rm -rf $TMPDIR/P*@$$.*" EXIT HUP
fi

# ENV  - No user override env setting while running our scripts.
unset ENV

# LANG - I hate the LOCALE sort stuff.  It works half way in interactive
#        mode, and totally break down in scripting.  If we need, we
#        set it on a per use basis.
unset LANG

PATH=$PATH:~/bin/mtool:/usr/local/bin

